# service-cotizador/serverless.yml
org: herlespinedo
service: service-cotizador

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 256
  timeout: 60
  environment:
    COTIZACIONES_TABLE_NAME: ${self:custom.cotizacionesTableName}
    S3_BUCKET_NAME: ${self:custom.s3BucketName}
    EVENT_BUS_NAME: ${self:custom.eventBusName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: !GetAtt CotizacionesTable.Arn
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:custom.s3BucketName}/*
    - Effect: Allow
      Action: events:PutEvents
      Resource: !ImportValue service-cotizador-${self:provider.stage}-EventBusArn

custom:
  cotizacionesTableName: Cotizaciones-${self:provider.stage}
  s3BucketName: prodirtec-cotizaciones-${self:provider.stage}-${aws:accountId}
  eventBusName: !ImportValue service-cotizador-${self:provider.stage}-EventBusName

plugins:
  - serverless-python-requirements

package:
  individually: true
  exclude:
    - ./**
  include:
    - cotizador_lambda.py    # <--- CORREGIDO: Sin el prefijo "service-cotizador/"
    - requirements.txt       # <--- CORREGIDO: Sin el prefijo "service-cotizador/"

functions:
  generateQuote:
    handler: cotizador_lambda.handler # <--- CORREGIDO: Sin el prefijo "service-cotizador/"
    events:
      - eventBridge:
          eventBus: ${self:custom.eventBusName}
          pattern:
            source: ["prodirtec.cotizaciones.solicitudes"]
            detail-type: ["CotizacionSolicitada"]

  getQuote:
    handler: cotizador_lambda.handler # <--- CORREGIDO
    events:
      - http:
          path: cotizaciones/{cotizacion_id}
          method: get
          cors: true

  adjustQuote:
    handler: cotizador_lambda.handler # <--- CORREGIDO
    events:
      - http:
          path: cotizaciones/{cotizacion_id}/ajustar
          method: put
          cors: true

  approveQuote:
    handler: cotizador_lambda.handler # <--- CORREGIDO
    events:
      - http:
          path: cotizaciones/{cotizacion_id}/aprobar
          method: post
          cors: true

# ... (La secciÃ³n de resources y outputs no necesita cambios) ...
resources:
  Resources:
    CotizacionesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.cotizacionesTableName}
        AttributeDefinitions:
          - AttributeName: cotizacion_id
            AttributeType: S
          - AttributeName: solicitud_id
            AttributeType: S
        KeySchema:
          - AttributeName: cotizacion_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: SolicitudIndex
            KeySchema:
              - AttributeName: solicitud_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    CotizacionesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

outputs:
  S3BucketName:
    Description: Name of the S3 bucket for quotes and contracts
    Value: ${self:custom.s3BucketName}
    Export:
      Name: ${self:service}-${self:provider.stage}-S3BucketName
